{"version":3,"sources":["next-audio.js"],"names":[],"mappingsfile":"next-audio.js","sourcesContent":["(function () {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n  var NxDomEvent = nx.DomEvent || require('@feizheng/next-dom-event');\n\n  var EVENTS = [\n    'error',\n    'play',\n    'pause',\n    'ended',\n    'timeupdate',\n    'loadedmetadata',\n    'canplay'\n  ];\n\n  var PROP_HOOKS = {\n    rate: 'playbackRate',\n    current: 'currentTime'\n  };\n\n  var NxAudio = nx.declare('nx.Audio', {\n    statics: {\n      STATUS: {\n        error: -1,\n        init: 0,\n        play: 1,\n        pause: 2,\n        loaded: 3,\n        ended: 4,\n        canplay: 5\n      }\n    },\n    properties: {\n      times: {\n        get: function () {\n          var el = this.element;\n          return {\n            rate: +(el.currentTime / el.duration).toFixed(2),\n            current: el.currentTime || 0,\n            duration: el.duration || 0\n          };\n        }\n      },\n      status: function () {\n        return this._status;\n      }\n    },\n    methods: {\n      init: function (inElement, inOptions) {\n        if (!inElement) return;\n        var callback = this.onChange.bind(this);\n        this.element = inElement;\n        this.options = nx.mix({ onChange: nx.noop }, inOptions);\n        this._status = NxAudio.STATUS.init;\n        EVENTS.forEach(function (event) {\n          this['_' + event + 'Res'] = NxDomEvent.on(\n            this.element,\n            event,\n            callback\n          );\n        }, this);\n      },\n      destroy: function () {\n        EVENTS.forEach(function (event) {\n          this['_' + event + 'Res'].destroy();\n        }, this);\n        document.body.removeChild(this.element);\n        this.element = null;\n      },\n      reInit: function (inElement, inOptions) {\n        this.destroy();\n        this.init(inElement, inOptions);\n      },\n      // loop/volume/rate/current/muted\n      prop: function (inKey, inValue) {\n        var key = PROP_HOOKS[inKey] || inKey;\n        var value = this.element[key];\n        var event = { type: 'prop', target: { key: inKey, value: value } };\n        if (typeof inValue === 'undefined') {\n          return value;\n        }\n        this.element[key] = inValue;\n        this.options.onChange(event);\n      },\n      move: function (inNumber) {\n        var num = inNumber > 1 ? 1 : inNumber;\n        this.element.currentTime = this.times.duration * num;\n      },\n      seek: function (inNumber) {\n        this.element.currentTime = inNumber;\n      },\n      play: function () {\n        if (!this.element) return Promise.resolve();\n        return this.element.play();\n      },\n      pause: function () {\n        if (!this.element) return Promise.resolve();\n        return this.element.pause();\n      },\n      stop: function () {\n        if (!this.element) return Promise.resolve();\n        this.element.currentTime = this.times.duration;\n        return this.element.pause();\n      },\n      onTimeUpdate: function (inEvent) {\n        var type = inEvent.type;\n        var paused = this.element.paused;\n        if (type !== 'timeupdate') {\n          this._status = NxAudio.STATUS[type];\n        } else {\n          this._status = paused ? NxAudio.STATUS.pause : NxAudio.STATUS.play;\n        }\n      },\n      onLoad: function (inEvent) {\n        var type = inEvent.type;\n        if (type === 'loadedmetadata') {\n          this._status = NxAudio.STATUS.loaded;\n        }\n      },\n      onChange: function (inEvent) {\n        this.onTimeUpdate(inEvent);\n        this.onLoad(inEvent);\n        this.options.onChange(inEvent);\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxAudio;\n  }\n})();\n"]}